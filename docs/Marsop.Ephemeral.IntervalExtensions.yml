### YamlMime:ManagedReference
items:
- uid: Marsop.Ephemeral.IntervalExtensions
  commentId: T:Marsop.Ephemeral.IntervalExtensions
  id: IntervalExtensions
  parent: Marsop.Ephemeral
  children:
  - Marsop.Ephemeral.IntervalExtensions.Covers(Marsop.Ephemeral.IInterval,Marsop.Ephemeral.IInterval)
  - Marsop.Ephemeral.IntervalExtensions.Covers(Marsop.Ephemeral.IInterval,System.DateTimeOffset)
  - Marsop.Ephemeral.IntervalExtensions.DurationOfIntersect(Marsop.Ephemeral.IInterval,Marsop.Ephemeral.IInterval)
  - Marsop.Ephemeral.IntervalExtensions.DurationUntilNow(Marsop.Ephemeral.IInterval)
  - Marsop.Ephemeral.IntervalExtensions.Intersect(Marsop.Ephemeral.IInterval,Marsop.Ephemeral.IInterval)
  - Marsop.Ephemeral.IntervalExtensions.Intersects(Marsop.Ephemeral.IInterval,Marsop.Ephemeral.IInterval)
  - Marsop.Ephemeral.IntervalExtensions.IsContiguouslyFollowedBy(Marsop.Ephemeral.IInterval,Marsop.Ephemeral.IInterval)
  - Marsop.Ephemeral.IntervalExtensions.IsContiguouslyPreceededBy(Marsop.Ephemeral.IInterval,Marsop.Ephemeral.IInterval)
  - Marsop.Ephemeral.IntervalExtensions.StartsBefore(Marsop.Ephemeral.IInterval,Marsop.Ephemeral.IInterval)
  - Marsop.Ephemeral.IntervalExtensions.ToInterval(Marsop.Ephemeral.IInterval)
  - Marsop.Ephemeral.IntervalExtensions.Union(Marsop.Ephemeral.IInterval,Marsop.Ephemeral.IInterval)
  langs:
  - csharp
  - vb
  name: IntervalExtensions
  nameWithType: IntervalExtensions
  fullName: Marsop.Ephemeral.IntervalExtensions
  type: Class
  source:
    remote:
      path: IntervalExtensions.cs
      branch: master
      repo: https://github.com/marsop/ephemeral.git
    id: IntervalExtensions
    path: IntervalExtensions.cs
    startLine: 5
  assemblies:
  - Marsop.Ephemeral
  namespace: Marsop.Ephemeral
  syntax:
    content: public static class IntervalExtensions
    content.vb: Public Module IntervalExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Marsop.Ephemeral.IntervalExtensions.Covers(Marsop.Ephemeral.IInterval,System.DateTimeOffset)
  commentId: M:Marsop.Ephemeral.IntervalExtensions.Covers(Marsop.Ephemeral.IInterval,System.DateTimeOffset)
  id: Covers(Marsop.Ephemeral.IInterval,System.DateTimeOffset)
  isExtensionMethod: true
  parent: Marsop.Ephemeral.IntervalExtensions
  langs:
  - csharp
  - vb
  name: Covers(IInterval, DateTimeOffset)
  nameWithType: IntervalExtensions.Covers(IInterval, DateTimeOffset)
  fullName: Marsop.Ephemeral.IntervalExtensions.Covers(Marsop.Ephemeral.IInterval, System.DateTimeOffset)
  type: Method
  source:
    remote:
      path: IntervalExtensions.cs
      branch: master
      repo: https://github.com/marsop/ephemeral.git
    id: Covers
    path: IntervalExtensions.cs
    startLine: 7
  assemblies:
  - Marsop.Ephemeral
  namespace: Marsop.Ephemeral
  syntax:
    content: public static bool Covers(this IInterval interval, DateTimeOffset timestamp)
    parameters:
    - id: interval
      type: Marsop.Ephemeral.IInterval
    - id: timestamp
      type: System.DateTimeOffset
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Covers(interval As IInterval, timestamp As DateTimeOffset) As Boolean
  overload: Marsop.Ephemeral.IntervalExtensions.Covers*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Marsop.Ephemeral.IntervalExtensions.Covers(Marsop.Ephemeral.IInterval,Marsop.Ephemeral.IInterval)
  commentId: M:Marsop.Ephemeral.IntervalExtensions.Covers(Marsop.Ephemeral.IInterval,Marsop.Ephemeral.IInterval)
  id: Covers(Marsop.Ephemeral.IInterval,Marsop.Ephemeral.IInterval)
  isExtensionMethod: true
  parent: Marsop.Ephemeral.IntervalExtensions
  langs:
  - csharp
  - vb
  name: Covers(IInterval, IInterval)
  nameWithType: IntervalExtensions.Covers(IInterval, IInterval)
  fullName: Marsop.Ephemeral.IntervalExtensions.Covers(Marsop.Ephemeral.IInterval, Marsop.Ephemeral.IInterval)
  type: Method
  source:
    remote:
      path: IntervalExtensions.cs
      branch: master
      repo: https://github.com/marsop/ephemeral.git
    id: Covers
    path: IntervalExtensions.cs
    startLine: 24
  assemblies:
  - Marsop.Ephemeral
  namespace: Marsop.Ephemeral
  syntax:
    content: public static bool Covers(this IInterval interval, IInterval other)
    parameters:
    - id: interval
      type: Marsop.Ephemeral.IInterval
    - id: other
      type: Marsop.Ephemeral.IInterval
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Covers(interval As IInterval, other As IInterval) As Boolean
  overload: Marsop.Ephemeral.IntervalExtensions.Covers*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Marsop.Ephemeral.IntervalExtensions.DurationUntilNow(Marsop.Ephemeral.IInterval)
  commentId: M:Marsop.Ephemeral.IntervalExtensions.DurationUntilNow(Marsop.Ephemeral.IInterval)
  id: DurationUntilNow(Marsop.Ephemeral.IInterval)
  isExtensionMethod: true
  parent: Marsop.Ephemeral.IntervalExtensions
  langs:
  - csharp
  - vb
  name: DurationUntilNow(IInterval)
  nameWithType: IntervalExtensions.DurationUntilNow(IInterval)
  fullName: Marsop.Ephemeral.IntervalExtensions.DurationUntilNow(Marsop.Ephemeral.IInterval)
  type: Method
  source:
    remote:
      path: IntervalExtensions.cs
      branch: master
      repo: https://github.com/marsop/ephemeral.git
    id: DurationUntilNow
    path: IntervalExtensions.cs
    startLine: 27
  assemblies:
  - Marsop.Ephemeral
  namespace: Marsop.Ephemeral
  syntax:
    content: public static TimeSpan DurationUntilNow(this IInterval interval)
    parameters:
    - id: interval
      type: Marsop.Ephemeral.IInterval
    return:
      type: System.TimeSpan
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DurationUntilNow(interval As IInterval) As TimeSpan
  overload: Marsop.Ephemeral.IntervalExtensions.DurationUntilNow*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Marsop.Ephemeral.IntervalExtensions.ToInterval(Marsop.Ephemeral.IInterval)
  commentId: M:Marsop.Ephemeral.IntervalExtensions.ToInterval(Marsop.Ephemeral.IInterval)
  id: ToInterval(Marsop.Ephemeral.IInterval)
  isExtensionMethod: true
  parent: Marsop.Ephemeral.IntervalExtensions
  langs:
  - csharp
  - vb
  name: ToInterval(IInterval)
  nameWithType: IntervalExtensions.ToInterval(IInterval)
  fullName: Marsop.Ephemeral.IntervalExtensions.ToInterval(Marsop.Ephemeral.IInterval)
  type: Method
  source:
    remote:
      path: IntervalExtensions.cs
      branch: master
      repo: https://github.com/marsop/ephemeral.git
    id: ToInterval
    path: IntervalExtensions.cs
    startLine: 35
  assemblies:
  - Marsop.Ephemeral
  namespace: Marsop.Ephemeral
  summary: "\nCreates an interval based on the information of this object\n"
  example: []
  syntax:
    content: public static Interval ToInterval(this IInterval interval)
    parameters:
    - id: interval
      type: Marsop.Ephemeral.IInterval
    return:
      type: Marsop.Ephemeral.Interval
      description: 'new interval '
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToInterval(interval As IInterval) As Interval
  overload: Marsop.Ephemeral.IntervalExtensions.ToInterval*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Marsop.Ephemeral.IntervalExtensions.Intersect(Marsop.Ephemeral.IInterval,Marsop.Ephemeral.IInterval)
  commentId: M:Marsop.Ephemeral.IntervalExtensions.Intersect(Marsop.Ephemeral.IInterval,Marsop.Ephemeral.IInterval)
  id: Intersect(Marsop.Ephemeral.IInterval,Marsop.Ephemeral.IInterval)
  isExtensionMethod: true
  parent: Marsop.Ephemeral.IntervalExtensions
  langs:
  - csharp
  - vb
  name: Intersect(IInterval, IInterval)
  nameWithType: IntervalExtensions.Intersect(IInterval, IInterval)
  fullName: Marsop.Ephemeral.IntervalExtensions.Intersect(Marsop.Ephemeral.IInterval, Marsop.Ephemeral.IInterval)
  type: Method
  source:
    remote:
      path: IntervalExtensions.cs
      branch: master
      repo: https://github.com/marsop/ephemeral.git
    id: Intersect
    path: IntervalExtensions.cs
    startLine: 45
  assemblies:
  - Marsop.Ephemeral
  namespace: Marsop.Ephemeral
  summary: "\nGenerates a new Interval, which is the intersection of the two.\nWARN: Can be null\n"
  example: []
  syntax:
    content: public static Option<IInterval> Intersect(this IInterval interval, IInterval other)
    parameters:
    - id: interval
      type: Marsop.Ephemeral.IInterval
      description: 'first interval '
    - id: other
      type: Marsop.Ephemeral.IInterval
      description: 'second interval '
    return:
      type: Optional.Option{Marsop.Ephemeral.IInterval}
      description: 'new interval '
    content.vb: "<ExtensionAttribute>\nPublic Shared Function Intersect(interval As IInterval, other As IInterval) As "
  overload: Marsop.Ephemeral.IntervalExtensions.Intersect*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Marsop.Ephemeral.IntervalExtensions.Union(Marsop.Ephemeral.IInterval,Marsop.Ephemeral.IInterval)
  commentId: M:Marsop.Ephemeral.IntervalExtensions.Union(Marsop.Ephemeral.IInterval,Marsop.Ephemeral.IInterval)
  id: Union(Marsop.Ephemeral.IInterval,Marsop.Ephemeral.IInterval)
  isExtensionMethod: true
  parent: Marsop.Ephemeral.IntervalExtensions
  langs:
  - csharp
  - vb
  name: Union(IInterval, IInterval)
  nameWithType: IntervalExtensions.Union(IInterval, IInterval)
  fullName: Marsop.Ephemeral.IntervalExtensions.Union(Marsop.Ephemeral.IInterval, Marsop.Ephemeral.IInterval)
  type: Method
  source:
    remote:
      path: IntervalExtensions.cs
      branch: master
      repo: https://github.com/marsop/ephemeral.git
    id: Union
    path: IntervalExtensions.cs
    startLine: 48
  assemblies:
  - Marsop.Ephemeral
  namespace: Marsop.Ephemeral
  syntax:
    content: public static IDisjointIntervalSet Union(this IInterval i, IInterval j)
    parameters:
    - id: i
      type: Marsop.Ephemeral.IInterval
    - id: j
      type: Marsop.Ephemeral.IInterval
    return:
      type: Marsop.Ephemeral.IDisjointIntervalSet
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Union(i As IInterval, j As IInterval) As IDisjointIntervalSet
  overload: Marsop.Ephemeral.IntervalExtensions.Union*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Marsop.Ephemeral.IntervalExtensions.DurationOfIntersect(Marsop.Ephemeral.IInterval,Marsop.Ephemeral.IInterval)
  commentId: M:Marsop.Ephemeral.IntervalExtensions.DurationOfIntersect(Marsop.Ephemeral.IInterval,Marsop.Ephemeral.IInterval)
  id: DurationOfIntersect(Marsop.Ephemeral.IInterval,Marsop.Ephemeral.IInterval)
  isExtensionMethod: true
  parent: Marsop.Ephemeral.IntervalExtensions
  langs:
  - csharp
  - vb
  name: DurationOfIntersect(IInterval, IInterval)
  nameWithType: IntervalExtensions.DurationOfIntersect(IInterval, IInterval)
  fullName: Marsop.Ephemeral.IntervalExtensions.DurationOfIntersect(Marsop.Ephemeral.IInterval, Marsop.Ephemeral.IInterval)
  type: Method
  source:
    remote:
      path: IntervalExtensions.cs
      branch: master
      repo: https://github.com/marsop/ephemeral.git
    id: DurationOfIntersect
    path: IntervalExtensions.cs
    startLine: 50
  assemblies:
  - Marsop.Ephemeral
  namespace: Marsop.Ephemeral
  syntax:
    content: public static TimeSpan DurationOfIntersect(this IInterval i, IInterval j)
    parameters:
    - id: i
      type: Marsop.Ephemeral.IInterval
    - id: j
      type: Marsop.Ephemeral.IInterval
    return:
      type: System.TimeSpan
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DurationOfIntersect(i As IInterval, j As IInterval) As TimeSpan
  overload: Marsop.Ephemeral.IntervalExtensions.DurationOfIntersect*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Marsop.Ephemeral.IntervalExtensions.Intersects(Marsop.Ephemeral.IInterval,Marsop.Ephemeral.IInterval)
  commentId: M:Marsop.Ephemeral.IntervalExtensions.Intersects(Marsop.Ephemeral.IInterval,Marsop.Ephemeral.IInterval)
  id: Intersects(Marsop.Ephemeral.IInterval,Marsop.Ephemeral.IInterval)
  isExtensionMethod: true
  parent: Marsop.Ephemeral.IntervalExtensions
  langs:
  - csharp
  - vb
  name: Intersects(IInterval, IInterval)
  nameWithType: IntervalExtensions.Intersects(IInterval, IInterval)
  fullName: Marsop.Ephemeral.IntervalExtensions.Intersects(Marsop.Ephemeral.IInterval, Marsop.Ephemeral.IInterval)
  type: Method
  source:
    remote:
      path: IntervalExtensions.cs
      branch: master
      repo: https://github.com/marsop/ephemeral.git
    id: Intersects
    path: IntervalExtensions.cs
    startLine: 54
  assemblies:
  - Marsop.Ephemeral
  namespace: Marsop.Ephemeral
  syntax:
    content: public static bool Intersects(this IInterval i, IInterval j)
    parameters:
    - id: i
      type: Marsop.Ephemeral.IInterval
    - id: j
      type: Marsop.Ephemeral.IInterval
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Intersects(i As IInterval, j As IInterval) As Boolean
  overload: Marsop.Ephemeral.IntervalExtensions.Intersects*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Marsop.Ephemeral.IntervalExtensions.IsContiguouslyFollowedBy(Marsop.Ephemeral.IInterval,Marsop.Ephemeral.IInterval)
  commentId: M:Marsop.Ephemeral.IntervalExtensions.IsContiguouslyFollowedBy(Marsop.Ephemeral.IInterval,Marsop.Ephemeral.IInterval)
  id: IsContiguouslyFollowedBy(Marsop.Ephemeral.IInterval,Marsop.Ephemeral.IInterval)
  isExtensionMethod: true
  parent: Marsop.Ephemeral.IntervalExtensions
  langs:
  - csharp
  - vb
  name: IsContiguouslyFollowedBy(IInterval, IInterval)
  nameWithType: IntervalExtensions.IsContiguouslyFollowedBy(IInterval, IInterval)
  fullName: Marsop.Ephemeral.IntervalExtensions.IsContiguouslyFollowedBy(Marsop.Ephemeral.IInterval, Marsop.Ephemeral.IInterval)
  type: Method
  source:
    remote:
      path: IntervalExtensions.cs
      branch: master
      repo: https://github.com/marsop/ephemeral.git
    id: IsContiguouslyFollowedBy
    path: IntervalExtensions.cs
    startLine: 62
  assemblies:
  - Marsop.Ephemeral
  namespace: Marsop.Ephemeral
  summary: "\nReturns true if both intervals join with each other seamlessly and without overlap\n"
  example: []
  syntax:
    content: public static bool IsContiguouslyFollowedBy(this IInterval i, IInterval o)
    parameters:
    - id: i
      type: Marsop.Ephemeral.IInterval
      description: earlier interval
    - id: o
      type: Marsop.Ephemeral.IInterval
      description: later interval
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsContiguouslyFollowedBy(i As IInterval, o As IInterval) As Boolean
  overload: Marsop.Ephemeral.IntervalExtensions.IsContiguouslyFollowedBy*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Marsop.Ephemeral.IntervalExtensions.IsContiguouslyPreceededBy(Marsop.Ephemeral.IInterval,Marsop.Ephemeral.IInterval)
  commentId: M:Marsop.Ephemeral.IntervalExtensions.IsContiguouslyPreceededBy(Marsop.Ephemeral.IInterval,Marsop.Ephemeral.IInterval)
  id: IsContiguouslyPreceededBy(Marsop.Ephemeral.IInterval,Marsop.Ephemeral.IInterval)
  isExtensionMethod: true
  parent: Marsop.Ephemeral.IntervalExtensions
  langs:
  - csharp
  - vb
  name: IsContiguouslyPreceededBy(IInterval, IInterval)
  nameWithType: IntervalExtensions.IsContiguouslyPreceededBy(IInterval, IInterval)
  fullName: Marsop.Ephemeral.IntervalExtensions.IsContiguouslyPreceededBy(Marsop.Ephemeral.IInterval, Marsop.Ephemeral.IInterval)
  type: Method
  source:
    remote:
      path: IntervalExtensions.cs
      branch: master
      repo: https://github.com/marsop/ephemeral.git
    id: IsContiguouslyPreceededBy
    path: IntervalExtensions.cs
    startLine: 65
  assemblies:
  - Marsop.Ephemeral
  namespace: Marsop.Ephemeral
  syntax:
    content: public static bool IsContiguouslyPreceededBy(this IInterval i, IInterval o)
    parameters:
    - id: i
      type: Marsop.Ephemeral.IInterval
    - id: o
      type: Marsop.Ephemeral.IInterval
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsContiguouslyPreceededBy(i As IInterval, o As IInterval) As Boolean
  overload: Marsop.Ephemeral.IntervalExtensions.IsContiguouslyPreceededBy*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Marsop.Ephemeral.IntervalExtensions.StartsBefore(Marsop.Ephemeral.IInterval,Marsop.Ephemeral.IInterval)
  commentId: M:Marsop.Ephemeral.IntervalExtensions.StartsBefore(Marsop.Ephemeral.IInterval,Marsop.Ephemeral.IInterval)
  id: StartsBefore(Marsop.Ephemeral.IInterval,Marsop.Ephemeral.IInterval)
  isExtensionMethod: true
  parent: Marsop.Ephemeral.IntervalExtensions
  langs:
  - csharp
  - vb
  name: StartsBefore(IInterval, IInterval)
  nameWithType: IntervalExtensions.StartsBefore(IInterval, IInterval)
  fullName: Marsop.Ephemeral.IntervalExtensions.StartsBefore(Marsop.Ephemeral.IInterval, Marsop.Ephemeral.IInterval)
  type: Method
  source:
    remote:
      path: IntervalExtensions.cs
      branch: master
      repo: https://github.com/marsop/ephemeral.git
    id: StartsBefore
    path: IntervalExtensions.cs
    startLine: 68
  assemblies:
  - Marsop.Ephemeral
  namespace: Marsop.Ephemeral
  syntax:
    content: public static bool StartsBefore(this IInterval interval, IInterval other)
    parameters:
    - id: interval
      type: Marsop.Ephemeral.IInterval
    - id: other
      type: Marsop.Ephemeral.IInterval
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function StartsBefore(interval As IInterval, other As IInterval) As Boolean
  overload: Marsop.Ephemeral.IntervalExtensions.StartsBefore*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Marsop.Ephemeral
  commentId: N:Marsop.Ephemeral
  name: Marsop.Ephemeral
  nameWithType: Marsop.Ephemeral
  fullName: Marsop.Ephemeral
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Marsop.Ephemeral.IntervalExtensions.Covers*
  commentId: Overload:Marsop.Ephemeral.IntervalExtensions.Covers
  name: Covers
  nameWithType: IntervalExtensions.Covers
  fullName: Marsop.Ephemeral.IntervalExtensions.Covers
- uid: Marsop.Ephemeral.IInterval
  commentId: T:Marsop.Ephemeral.IInterval
  parent: Marsop.Ephemeral
  name: IInterval
  nameWithType: IInterval
  fullName: Marsop.Ephemeral.IInterval
- uid: System.DateTimeOffset
  commentId: T:System.DateTimeOffset
  parent: System
  isExternal: true
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Marsop.Ephemeral.IntervalExtensions.DurationUntilNow*
  commentId: Overload:Marsop.Ephemeral.IntervalExtensions.DurationUntilNow
  name: DurationUntilNow
  nameWithType: IntervalExtensions.DurationUntilNow
  fullName: Marsop.Ephemeral.IntervalExtensions.DurationUntilNow
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: Marsop.Ephemeral.IntervalExtensions.ToInterval*
  commentId: Overload:Marsop.Ephemeral.IntervalExtensions.ToInterval
  name: ToInterval
  nameWithType: IntervalExtensions.ToInterval
  fullName: Marsop.Ephemeral.IntervalExtensions.ToInterval
- uid: Marsop.Ephemeral.Interval
  commentId: T:Marsop.Ephemeral.Interval
  parent: Marsop.Ephemeral
  name: Interval
  nameWithType: Interval
  fullName: Marsop.Ephemeral.Interval
- uid: Marsop.Ephemeral.IntervalExtensions.Intersect*
  commentId: Overload:Marsop.Ephemeral.IntervalExtensions.Intersect
  name: Intersect
  nameWithType: IntervalExtensions.Intersect
  fullName: Marsop.Ephemeral.IntervalExtensions.Intersect
- uid: Optional.Option{Marsop.Ephemeral.IInterval}
  commentId: T:Optional.Option{Marsop.Ephemeral.IInterval}
  parent: Optional
  definition: Optional.Option`1
  name: Option<IInterval>
  nameWithType: Option<IInterval>
  fullName: Optional.Option<Marsop.Ephemeral.IInterval>
  nameWithType.vb: Option(Of IInterval)
  fullName.vb: Optional.Option(Of Marsop.Ephemeral.IInterval)
  name.vb: Option(Of IInterval)
  spec.csharp:
  - uid: Optional.Option`1
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Marsop.Ephemeral.IInterval
    name: IInterval
    nameWithType: IInterval
    fullName: Marsop.Ephemeral.IInterval
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Optional.Option`1
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Marsop.Ephemeral.IInterval
    name: IInterval
    nameWithType: IInterval
    fullName: Marsop.Ephemeral.IInterval
  - name: )
    nameWithType: )
    fullName: )
- uid: Optional.Option`1
  commentId: T:Optional.Option`1
  isExternal: true
  name: Option<T>
  nameWithType: Option<T>
  fullName: Optional.Option<T>
  nameWithType.vb: Option(Of T)
  fullName.vb: Optional.Option(Of T)
  name.vb: Option(Of T)
  spec.csharp:
  - uid: Optional.Option`1
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Optional.Option`1
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Optional
  commentId: N:Optional
  isExternal: true
  name: Optional
  nameWithType: Optional
  fullName: Optional
- uid: Marsop.Ephemeral.IntervalExtensions.Union*
  commentId: Overload:Marsop.Ephemeral.IntervalExtensions.Union
  name: Union
  nameWithType: IntervalExtensions.Union
  fullName: Marsop.Ephemeral.IntervalExtensions.Union
- uid: Marsop.Ephemeral.IDisjointIntervalSet
  commentId: T:Marsop.Ephemeral.IDisjointIntervalSet
  parent: Marsop.Ephemeral
  name: IDisjointIntervalSet
  nameWithType: IDisjointIntervalSet
  fullName: Marsop.Ephemeral.IDisjointIntervalSet
- uid: Marsop.Ephemeral.IntervalExtensions.DurationOfIntersect*
  commentId: Overload:Marsop.Ephemeral.IntervalExtensions.DurationOfIntersect
  name: DurationOfIntersect
  nameWithType: IntervalExtensions.DurationOfIntersect
  fullName: Marsop.Ephemeral.IntervalExtensions.DurationOfIntersect
- uid: Marsop.Ephemeral.IntervalExtensions.Intersects*
  commentId: Overload:Marsop.Ephemeral.IntervalExtensions.Intersects
  name: Intersects
  nameWithType: IntervalExtensions.Intersects
  fullName: Marsop.Ephemeral.IntervalExtensions.Intersects
- uid: Marsop.Ephemeral.IntervalExtensions.IsContiguouslyFollowedBy*
  commentId: Overload:Marsop.Ephemeral.IntervalExtensions.IsContiguouslyFollowedBy
  name: IsContiguouslyFollowedBy
  nameWithType: IntervalExtensions.IsContiguouslyFollowedBy
  fullName: Marsop.Ephemeral.IntervalExtensions.IsContiguouslyFollowedBy
- uid: Marsop.Ephemeral.IntervalExtensions.IsContiguouslyPreceededBy*
  commentId: Overload:Marsop.Ephemeral.IntervalExtensions.IsContiguouslyPreceededBy
  name: IsContiguouslyPreceededBy
  nameWithType: IntervalExtensions.IsContiguouslyPreceededBy
  fullName: Marsop.Ephemeral.IntervalExtensions.IsContiguouslyPreceededBy
- uid: Marsop.Ephemeral.IntervalExtensions.StartsBefore*
  commentId: Overload:Marsop.Ephemeral.IntervalExtensions.StartsBefore
  name: StartsBefore
  nameWithType: IntervalExtensions.StartsBefore
  fullName: Marsop.Ephemeral.IntervalExtensions.StartsBefore
